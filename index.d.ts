/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/**
 * Represents keyboard key codes used to define hotkeys.
 * Each variant corresponds to a specific physical key.
*/
export const enum KeyCode {
  Backquote = 'Backquote',
  Backslash = 'Backslash',
  BracketLeft = 'BracketLeft',
  BracketRight = 'BracketRight',
  Comma = 'Comma',
  Digit0 = 'Digit0',
  Digit1 = 'Digit1',
  Digit2 = 'Digit2',
  Digit3 = 'Digit3',
  Digit4 = 'Digit4',
  Digit5 = 'Digit5',
  Digit6 = 'Digit6',
  Digit7 = 'Digit7',
  Digit8 = 'Digit8',
  Digit9 = 'Digit9',
  Equal = 'Equal',
  IntlBackslash = 'IntlBackslash',
  IntlRo = 'IntlRo',
  IntlYen = 'IntlYen',
  KeyA = 'KeyA',
  KeyB = 'KeyB',
  KeyC = 'KeyC',
  KeyD = 'KeyD',
  KeyE = 'KeyE',
  KeyF = 'KeyF',
  KeyG = 'KeyG',
  KeyH = 'KeyH',
  KeyI = 'KeyI',
  KeyJ = 'KeyJ',
  KeyK = 'KeyK',
  KeyL = 'KeyL',
  KeyM = 'KeyM',
  KeyN = 'KeyN',
  KeyO = 'KeyO',
  KeyP = 'KeyP',
  KeyQ = 'KeyQ',
  KeyR = 'KeyR',
  KeyS = 'KeyS',
  KeyT = 'KeyT',
  KeyU = 'KeyU',
  KeyV = 'KeyV',
  KeyW = 'KeyW',
  KeyX = 'KeyX',
  KeyY = 'KeyY',
  KeyZ = 'KeyZ',
  Minus = 'Minus',
  Period = 'Period',
  Quote = 'Quote',
  Semicolon = 'Semicolon',
  Slash = 'Slash',
  AltLeft = 'AltLeft',
  AltRight = 'AltRight',
  Backspace = 'Backspace',
  CapsLock = 'CapsLock',
  ContextMenu = 'ContextMenu',
  ControlLeft = 'ControlLeft',
  ControlRight = 'ControlRight',
  Enter = 'Enter',
  MetaLeft = 'MetaLeft',
  MetaRight = 'MetaRight',
  ShiftLeft = 'ShiftLeft',
  ShiftRight = 'ShiftRight',
  Space = 'Space',
  Tab = 'Tab',
  Convert = 'Convert',
  KanaMode = 'KanaMode',
  Lang1 = 'Lang1',
  Lang2 = 'Lang2',
  Lang3 = 'Lang3',
  Lang4 = 'Lang4',
  Lang5 = 'Lang5',
  NonConvert = 'NonConvert',
  Delete = 'Delete',
  End = 'End',
  Help = 'Help',
  Home = 'Home',
  Insert = 'Insert',
  PageDown = 'PageDown',
  PageUp = 'PageUp',
  ArrowDown = 'ArrowDown',
  ArrowLeft = 'ArrowLeft',
  ArrowRight = 'ArrowRight',
  ArrowUp = 'ArrowUp',
  NumLock = 'NumLock',
  Numpad0 = 'Numpad0',
  Numpad1 = 'Numpad1',
  Numpad2 = 'Numpad2',
  Numpad3 = 'Numpad3',
  Numpad4 = 'Numpad4',
  Numpad5 = 'Numpad5',
  Numpad6 = 'Numpad6',
  Numpad7 = 'Numpad7',
  Numpad8 = 'Numpad8',
  Numpad9 = 'Numpad9',
  NumpadAdd = 'NumpadAdd',
  NumpadBackspace = 'NumpadBackspace',
  NumpadClear = 'NumpadClear',
  NumpadClearEntry = 'NumpadClearEntry',
  NumpadComma = 'NumpadComma',
  NumpadDecimal = 'NumpadDecimal',
  NumpadDivide = 'NumpadDivide',
  NumpadEnter = 'NumpadEnter',
  NumpadEqual = 'NumpadEqual',
  NumpadHash = 'NumpadHash',
  NumpadMemoryAdd = 'NumpadMemoryAdd',
  NumpadMemoryClear = 'NumpadMemoryClear',
  NumpadMemoryRecall = 'NumpadMemoryRecall',
  NumpadMemoryStore = 'NumpadMemoryStore',
  NumpadMemorySubtract = 'NumpadMemorySubtract',
  NumpadMultiply = 'NumpadMultiply',
  NumpadParenLeft = 'NumpadParenLeft',
  NumpadParenRight = 'NumpadParenRight',
  NumpadStar = 'NumpadStar',
  NumpadSubtract = 'NumpadSubtract',
  Escape = 'Escape',
  Fn = 'Fn',
  FnLock = 'FnLock',
  PrintScreen = 'PrintScreen',
  ScrollLock = 'ScrollLock',
  Pause = 'Pause',
  BrowserBack = 'BrowserBack',
  BrowserFavorites = 'BrowserFavorites',
  BrowserForward = 'BrowserForward',
  BrowserHome = 'BrowserHome',
  BrowserRefresh = 'BrowserRefresh',
  BrowserSearch = 'BrowserSearch',
  BrowserStop = 'BrowserStop',
  Eject = 'Eject',
  LaunchApp1 = 'LaunchApp1',
  LaunchApp2 = 'LaunchApp2',
  LaunchMail = 'LaunchMail',
  MediaPlayPause = 'MediaPlayPause',
  MediaSelect = 'MediaSelect',
  MediaStop = 'MediaStop',
  MediaTrackNext = 'MediaTrackNext',
  MediaTrackPrevious = 'MediaTrackPrevious',
  Power = 'Power',
  Sleep = 'Sleep',
  AudioVolumeDown = 'AudioVolumeDown',
  AudioVolumeMute = 'AudioVolumeMute',
  AudioVolumeUp = 'AudioVolumeUp',
  WakeUp = 'WakeUp',
  Hyper = 'Hyper',
  Super = 'Super',
  Turbo = 'Turbo',
  Abort = 'Abort',
  Resume = 'Resume',
  Suspend = 'Suspend',
  Again = 'Again',
  Copy = 'Copy',
  Cut = 'Cut',
  Find = 'Find',
  Open = 'Open',
  Paste = 'Paste',
  Props = 'Props',
  Select = 'Select',
  Undo = 'Undo',
  Hiragana = 'Hiragana',
  Katakana = 'Katakana',
  Unidentified = 'Unidentified',
  F1 = 'F1',
  F2 = 'F2',
  F3 = 'F3',
  F4 = 'F4',
  F5 = 'F5',
  F6 = 'F6',
  F7 = 'F7',
  F8 = 'F8',
  F9 = 'F9',
  F10 = 'F10',
  F11 = 'F11',
  F12 = 'F12',
  F13 = 'F13',
  F14 = 'F14',
  F15 = 'F15',
  F16 = 'F16',
  F17 = 'F17',
  F18 = 'F18',
  F19 = 'F19',
  F20 = 'F20',
  F21 = 'F21',
  F22 = 'F22',
  F23 = 'F23',
  F24 = 'F24',
  F25 = 'F25',
  F26 = 'F26',
  F27 = 'F27',
  F28 = 'F28',
  F29 = 'F29',
  F30 = 'F30',
  F31 = 'F31',
  F32 = 'F32',
  F33 = 'F33',
  F34 = 'F34',
  F35 = 'F35',
  BrightnessDown = 'BrightnessDown',
  BrightnessUp = 'BrightnessUp',
  DisplayToggleIntExt = 'DisplayToggleIntExt',
  KeyboardLayoutSelect = 'KeyboardLayoutSelect',
  LaunchAssistant = 'LaunchAssistant',
  LaunchControlPanel = 'LaunchControlPanel',
  LaunchScreenSaver = 'LaunchScreenSaver',
  MailForward = 'MailForward',
  MailReply = 'MailReply',
  MailSend = 'MailSend',
  MediaFastForward = 'MediaFastForward',
  MediaPause = 'MediaPause',
  MediaPlay = 'MediaPlay',
  MediaRecord = 'MediaRecord',
  MediaRewind = 'MediaRewind',
  MicrophoneMuteToggle = 'MicrophoneMuteToggle',
  PrivacyScreenToggle = 'PrivacyScreenToggle',
  SelectTask = 'SelectTask',
  ShowAllWindows = 'ShowAllWindows',
  ZoomToggle = 'ZoomToggle'
}
/**
 * Returns a list of all available key code names as strings.
 *
 * Useful for getting all possible key codes supported by the hotkey manager.
 *
 * @returns {string[]} An array of key code names.
*/
export declare function keyCodeKeys(): Array<string>
/**
 * Returns a list of all available mod names as strings.
 *
 * Useful for getting all possible mods supported by the hotkey manager.
 *
 * @returns {string[]} An array of mod names.
*/
export declare function modKeys(): Array<string>
/**
 * Converts a KeyCode enum variant to a human-readable string representation.
 *
 * This is useful for displaying key codes in a user-friendly format.
 *
 * @param {KeyCode} key_code - The key code to convert.
 * @returns {string | null} A human-readable string representing the key code, or null if no mapping exists.
*/
export declare function keyCodeToHuman(keyCode: KeyCode): string | null
/**
 * Modifier keys used in hotkey combinations.
*/
export const enum Mod {
  Control = 'Control',
  Alt = 'Alt',
  AltGraph = 'AltGraph',
  CapsLock = 'CapsLock',
  Fn = 'Fn',
  FnLock = 'FnLock',
  Meta = 'Meta',
  NumLock = 'NumLock',
  ScrollLock = 'ScrollLock',
  Symbol = 'Symbol',
  SymbolLock = 'SymbolLock',
  Hyper = 'Hyper',
  Shift = 'Shift',
  Super = 'Super'
}
/**
 * Descriptor for a hotkey combination.
 *
 * Contains the key code and modifier keys.
*/
export interface Desc {
  code: KeyCode
  mods: Array<Mod>
}
/**
 * Computes a unique identifier for the given key combination.
 *
 * This function takes a key code and a list of modifier keys,
 * and returns a stable numeric ID that uniquely identifies
 * that specific hotkey combination.
*/
export declare function getHotkeyId(code: KeyCode, mods: Array<Mod>): number
/**
 * Describes the type of a hotkey event.
 *
 * Possible values:
 * - `Pressed`: The hotkey was pressed.
 * - `Released`: The hotkey was released.
*/
export const enum EventType {
  Pressed = 0,
  Released = 1
}
/**
 * Represents a global hotkey event.
 *
 * Properties:
 * - `id` (number): The unique identifier of the hotkey.
 * - `code` (KeyCode): The key code associated with the hotkey.
 * - `mods` (Mod[]): An array of modifier keys (e.g., Control, Shift).
 * - `event_type` (EventType): The type of the event (pressed or released).
*/
export interface Event {
  id: number
  code: KeyCode
  mods: Array<Mod>
  eventType: EventType
}
/**
 * Represents the possible response codes for hotkey operations.
 *
 * - `Ok`: The operation was successful.
 * - `Error`: The operation failed.
*/
export const enum ResponseCode {
  Ok = 'Ok',
  Error = 'Error'
}
/**
 * Returns a singleton instance of `HotkManager`.
 *
 * All `HotkManager` instances share the same internal state, allowing global coordination of hotkeys across your application.
 *
 * @example
 * ```js
 * import { hotk } from '@hotk/core';
 *
 * const manager = hotk();
 * ```
*/
export declare function hotk(): HotkManager | null
/**
 * Represents a response from a hotkey operation.
*/
export declare class HotkReponse {
  code: ResponseCode
  id: number
  error?: string
  /**
  * Checks whether the response indicates success.
  *
  * @returns `true` if the operation was successful, otherwise `false`.
  */
  isOk(): boolean
}
/**
 * Manages global hotkeys by handling registration, unregistration and listening for hotkey events.
*/
export declare class HotkManager {
  /**
  * Initializes the hotkey event listener.
  *
  * This method sets up the callback that will be invoked for every global hotkey event.
  * It can only be called once per program. Subsequent calls will do nothing and return `false`.
  *
  * @param on_event - A function that will be called with each hotkey event.
  *
  * @example
  * ```js
  * import { hotk, Mod, KeyCode } from '@hotk/core';
  *
  * // Get the singleton instance
  * const manager = hotk();
  *
  * // Register Ctrl + A as a hotkey
  * const result = manager.register([Mod.Control], KeyCode.KeyA);
  *
  * // Listen for hotkey events
  * manager.init((event) => {
  *   console.log('Received event:', event);
  * });
  * ```
  */
  init(on_event: (event: Event) => void): boolean
  /**
  * Registers a global hotkey.
  *
  * @example
  * ```js
  * import { hotk, Mod, KeyCode } from '@hotk/core';
  *
  * // Get the singleton instance
  * const manager = hotk();
  *
  * // Register Ctrl + A as a hotkey
  * const result = manager.register([Mod.Control], KeyCode.KeyA);
  *
  * if (result.isOk()) {
  *   console.log('Hotkey successfully registered');
  * } else {
  *   console.error('Failed to register hotkey');
  * }
  *
  * // Listen for hotkey events
  * manager.init((event) => {
  *   console.log('Received event:', event);
  * });
  * ```
  */
  register(mods: Array<Mod>, code: KeyCode): HotkReponse
  /**
  * Unregisters a global hotkey.
  *
  * @example
  * ```js
  * import { hotk, Mod, KeyCode } from '@hotk/core';
  *
  * // Get the singleton instance
  * const manager = hotk();
  *
  * // Register Ctrl + A as a hotkey
  * const result = manager.register([Mod.Control], KeyCode.KeyA);
  *
  * // Listen for hotkey events
  * manager.init((event) => {
  *   console.log('Received event:', event);
  * });
  *
  * // Unregister the hotkey after 3 seconds
  * setTimeout(() => {
  *   manager.unregister([Mod.Control], KeyCode.KeyA);
  * }, 3000);
  * ```
  */
  unregister(mods: Array<Mod>, code: KeyCode): HotkReponse
  /**
  * Allows the Node.js process to exit naturally if no other tasks are pending.
  *
  * This detaches the internal hotkey event callback from the event loop,
  * meaning the process won't be held open just to listen for hotkey events.
  *
  * @returns `true` if the operation succeeded, `false` otherwise.
  *
  * @example
  * ```js
  * const manager = hotk();
  * manager.init(console.log);
  * manager.unref(); // Now the process can exit if nothing else is running.
  * ```
  */
  unref(): boolean
  /**
  * Keeps the Node.js process alive to continue listening for hotkey events.
  *
  * This ensures that the process will not exit until `destroy()` is called
  * or `unref()` is used to detach the event callback from the event loop.
  *
  * @returns `true` if the operation succeeded, `false` otherwise.
  *
  * @example
  * ```js
  * const manager = hotk();
  * manager.init(console.log);
  * manager.refer(); // Keeps the process alive
  * ```
  */
  refer(): boolean
  /**
  * Stops listening for hotkey events.
  *
  * This is required to allow the Node.js process to exit when `init` was called without `unref: true`.
  *
  * @example
  * ```js
  * import { hotk, Mod, KeyCode } from '@hotk/core';
  *
  * // Get the singleton instance
  * const manager = hotk();
  *
  * // Register Ctrl + A as a hotkey
  * const result = manager.register([Mod.Control], KeyCode.KeyA);
  *
  * if (result.isOk()) {
  *   console.log('Hotkey successfully registered');
  * } else {
  *   console.error('Failed to register hotkey');
  * }
  *
  * // Start listening for hotkey events without unref
  * manager.init((event) => {
  *   console.log('Received event:', event);
  * });
  *
  * // Stop listening after 3 seconds so the process can exit
  * setTimeout(() => {
  *   manager.destroy();
  * }, 3000);
  * ```
  */
  destroy(): void
}
